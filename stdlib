( lambda=1
) {}
() unshift('') //push empty string
\\ unshift(' ') //push space
n\\ unshift('\n') //push newline

gi unshift(id()) //push string at ID given by index 0
gi\\ unshift(unesc(id())) //`gi` but parse escape codes
gl unshift(loc()) //`gi` but in the local scope
gl\\ unshift(unesc(loc())) //`gl` but parse escape codes
gs unshift(form()) //push stack joined by newlines
si ids[shift()]=shift() //set global ID at index 0
sl stack[st].scope[shift()]=shift() //set local ID at index 0
:: loc() //`gi` without pushing anything to stack (used for exposing ID's cleanly)
::: id() //`::` but exposes ID's into the global scope

es exec(shift()) //execute string at index 0
e& ($.swap(),shift()?$.es():shift()) //`es` if index 1 is truthy
e| ($.swap(),shift()?shift():$.es()) //`es` if index 1 is falsy
e? ($.rot(),shift()||$.swap(),shift(),$.es()) //`es` on index 1 if index 2 is truthy; otherwise, `es` on index 0

read unshift(fs.readFileSync(shift())+'') //read file at path given by index 0
write fs.writeFileSync(shift(),shift()) //write string at index 1 to file at path given by index 0
in unshift((''+cp.execSync('read x;echo $x',{stdio:[process.stdin]})).slice(0,-1)) //pushes user input
out process.stdout.write(''+shift()) //output index 0 to STDOUT
outln process.stdout.write(''+shift()+'\n') //output index 0 as a line to STDOUT

e unshift(Math.E) //Euler's constant
pi unshift(Math.PI) //π

E ($.swap(),unshift(shift()*Math.pow(10,shift()))) //`(index 1)*10^(index 0)`
_ unshift(-shift()) //negation
+ unshift(shift()- -shift()) //addition
- ($.swap(),unshift(shift()-shift())) //subtraction
* unshift(shift()*shift()) //multiplication
/ ($.swap(),unshift(shift()/shift())) //division
// ($.swap(),unshift(Math.floor(shift()/shift()))) //integer division
% ($.swap(),unshift(mod(shift(),shift()))) //modulus
/% ($.over(),$.over(),$['//'](),$.rot_(),$['%']()) //divmod
^ ($.swap(),unshift(Math.pow(shift(),shift()))) //exponentiation
abs unshift(Math.abs(shift())) //absolute value
sign unshift(Math.sign(shift())) //sign function
rand unshift(Math.random()) //push random number between 0 and 1
time unshift(_.now()) //push milliseconds since January 1, 1970 00:00:00.000
ln unshift(Math.log(shift())) //natural logarithm
log unshift(Math.log10(shift())) //base-10 logarithm
sin unshift(Math.sin(shift())) //sine
cos unshift(Math.cos(shift())) //cosine
tan unshift(Math.tan(shift())) //tangent
sinh unshift(Math.sinh(shift())) //hyperbolic sine
cosh unshift(Math.cosh(shift())) //hyperbolic cosine
tanh unshift(Math.tanh(shift())) //hyperbolic tangent
asin unshift(Math.asin(shift())) //inverse sine
acos unshift(Math.acos(shift())) //inverse cosine
atan unshift(Math.atan(shift())) //inverse tangent
asinh unshift(Math.asinh(shift())) //inverse hyperbolic sine
acosh unshift(Math.acosh(shift())) //inverse hyperbolic cosine
atanh unshift(Math.atanh(shift())) //inverse hyperbolic tangent
max unshift(Math.max(...stack[st])) //push max
min unshift(Math.min(...stack[st])) //push min
range (i=shift(),j=shift(),unshift(...range(j,i).reverse())) //inclusive range

~ unshift(~shift()) //bitwise not
! unshift(+!shift()) //logical not
& unshift(shift()&shift()) //bitwise and
| unshift(shift()|shift()) //bitwise or
$ unshift(shift()^shift()) //bitwise xor
<< ($.swap(),unshift(shift()<<shift())) //bitwise left shift
>> ($.swap(),unshift(shift()>>shift())) //bitwise right shift, sign-propagating
>>> ($.swap(),unshift(shift()>>>shift())) //bitwise right shift, zero-fill

= unshift(+(shift()==shift())) //equal
!= unshift(+(shift()!=shift())) //not equal
> unshift(+(shift()<shift())) //greater than
< unshift(+(shift()>shift())) //less than
>= unshift(+(shift()<=shift())) //greater than or equal to
<= unshift(+(shift()>=shift())) //less than or equal to
<=> (i=shift(),j=shift(),unshift(i<j?1:i>j?-1:0)) //comparison function (-1 for less than, 0 for equal, 1 for greater than)

floor unshift(Math.floor(shift())) //round towards -∞
trunc unshift(Math.trunc(shift())) //round towards 0
round unshift(Math.round(shift())) //round towards or away from 0 depending on < or >= .5
ceil unshift(Math.ceil(shift())) //round towards ∞

pick unshift(get(shift())) //`dup` but with any index
nix splice(shift()) //`drop` but with any index
roll (x=get(0),$.pick(),unshift(x+1),$.nix()) //`rot` but with any index
roll_ splice(shift(),0,shift()) //`rot_` but with any index
trade unshift(splice(shift()-1,1,shift())[0]) //swap index 1 with index given by index 0
dup unshift(stack[st][0]) //push index 0
drop shift() //pop index 0
rot unshift(splice(2)[0]) //bring index 2 to index 0
rot_ ($.rot(),$.rot()) //bring index 0 to index 2
swap unshift(splice(1)[0]) //bring index 1 to index 0
nip ($.swap(),shift()) //pop index 1
tuck ($.dup(),$.rot_()) //push index 0 to index 2
over ($.swap(),$.tuck()) //push index 1
clr stack[st]=[] //pop all items
rev stack[st].reverse() //reverse stack
dip ($.swap(),i=shift(),$.es(),unshift(i)) //pop index 0, `es`, push popped index 0

split ($.swap(),unshift(...(shift()+'').split(shift()).reverse())) //split string at index 1 over string at index 0
join (i=shift(),unshift(stack[st].slice(0).reverse().join(i))) //join stack over string at index 0
++ ($.swap(),unshift(''+shift()+shift())) //concatenate top 2 items as strings
len unshift((''+shift()).length) //push string length of index 0
>char unshift(String.fromCodePoint(shift())) //convert number to Unicode
<char unshift(shift().codePointAt()) //convert Unicode to number
lower unshift(shift().toLowerCase()) //lowercase
upper unshift(shift().toUpperCase()) //uppercase
repeat ($.swap(),unshift((shift()+'').repeat(shift()))) //repeat string by index 0
pad (i=shift(),j=shift(),k=shift(),unshift(_.pad(k,j,i))) //pad string given by index 2 until length given by index 0 with string given by index 1
padl (i=shift(),j=shift(),k=shift(),unshift(_.padStart(k,j,i))) //`pad` but only from the left
padr (i=shift(),j=shift(),k=shift(),unshift(_.padEnd(k,j,i))) //`pad` but only from the right

stack stack[st=shift()]||(stack[st]=[]) //initialize stack with name given by index 0 or switch to that stack if it already exists
push stack[shift()].unshift(shift()) //push index 1 to another stack with name given by index 0
pull unshift(stack[shift()].shift()) //push top item of another stack with name given by index 0
size unshift(stack[st].length) //push stack length
uniq stack[st]=_.uniq(stack[st]) //remove all duplicates in current stack
take stack[st]=_.take(stack[st],shift()) //keep top _n_ items, where _n_ is index 0
drop stack[st]=_.drop(stack[st],shift()) //pop top _n_ items, where _n_ is index 0
merge unshift(...stack[shift()]) //push items of another stack with name given by index 0
union (i=shift(),stack[st]=_.union(stack[st],stack[i])) //set union with current stack and stack with name given by index 0
intersection (i=shift(),stack[st]=_.intersection(stack[st],stack[i])) //set intersection with current stack and stack with name given by index 0
difference (i=shift(),stack[st]=_.difference(stack[st],stack[i])) //set difference with current stack and stack with name given by index 0

map (X=shift(),iter.unshift(st),stack[st]=stack[st].map(a=> //`es` on each individual item in the stack
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift())
filter (X=shift(),iter.unshift(st),stack[st]=stack[st].filter(a=> //remove each item that is falsy after `es`
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift())
fold (X=shift(),Z=shift(),iter.unshift(st),stack[st].map(a=> //VERY hard to explain; [this might help](https://en.wikipedia.org/wiki/Fold_(higher-order_function))
    (stack[st=iter[0]+' ']=[X,a,Z],$.es(),Z=shift())
  ),delete stack[iter[0]+' '],st=iter.shift(),unshift(Z))
any (X=shift(),iter.unshift(st),Z=+stack[st].some(a=> //push 1 if any items return truthy after `es`, else push 0
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],stack[st=iter.shift()]=[Z])
all (X=shift(),iter.unshift(st),Z=+stack[st].every(a=> //push 1 if all items return truthy after `es`, else push 0
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],stack[st=iter.shift()]=[Z])
find (X=shift(),iter.unshift(st),Z=stack[st].find(a=> //find first item that returns truthy after `es` or undefined on failure
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],stack[st=iter.shift()]=[Z])
findi (X=shift(),iter.unshift(st),Z=+stack[st].findIndex(a=> //`find` but returns index (or -1 on fail)
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],stack[st=iter.shift()]=[Z])
takew (X=shift(),iter.unshift(st),stack[st]=_.takeWhile(stack[st],a=> //`take` items until `es` returns falsy for an item
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift())
dropw (X=shift(),iter.unshift(st),stack[st]=_.dropWhile(stack[st],a=> //`drop` items until `es` returns falsy for an item
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift())
sort (X=shift(),iter.unshift(st),stack[st]=_.sortBy(stack[st],a=> //sort items in ascending order based on `es`
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift())
part (X=shift(),Y=shift(),iter.unshift(st),Z=_.partition(stack[st],a=> //separate items based on whether they return truthy after `es`; failing items are put into a stack with the name given by index 1
    (stack[st=iter[0]+' ']=[X,a],$.es(),shift())
  ),delete stack[iter[0]+' '],st=iter.shift(),stack[st]=Z[0],stack[Y]=Z[1])
