( lambda=1
) {}
() unshift('')
\" unshift(' ')
\\ unshift('\n')

gi unshift(id())
gi\\ unshift(unesc(id()))
gs unshift(form())
si ids[shift()]=shift()
:: id()

es exec(shift())
e& ($.swap(),shift()?$.es():shift())
e| ($.swap(),shift()?shift():$.es())
e? ($.rot(),shift()||$.swap(),shift(),$.es())
ei (i=shift(),setInterval(a=>exec(i),shift()))
et (i=shift(),setTimeout(a=>exec(i),shift()))

read unshift(fs.readFileSync(shift())+'')
write fs.writeFileSync(shift(),shift())
in (e=shift(),q=rl.createInterface(process.stdin,process.stdout),q.question('',a=>{
    unshift(e,a)
    $.es()
    q.close()
  }))
out process.stdout.write(''+shift())
outln process.stdout.write(''+shift()+'\n')

e unshift(Math.E)
pi unshift(Math.PI)

E ($.swap(),unshift(shift()*Math.pow(10,shift())))
_ unshift(-shift())
+ unshift(shift()- -shift())
- ($.swap(),unshift(shift()-shift()))
* unshift(shift()*shift())
/ ($.swap(),unshift(shift()/shift()))
// ($.swap(),unshift(Math.floor(shift()/shift())))
% ($.swap(),unshift(mod(shift(),shift())))
/% ($.over(),$.over(),$['//'](),$.rot_(),$['%']())
^ ($.swap(),unshift(Math.pow(shift(),shift())))
abs unshift(Math.abs(shift()))
sign unshift(Math.sign(shift()))
rand unshift(Math.random())
time unshift(_.now())
ln unshift(Math.log(shift()))
log unshift(Math.log10(shift()))
sin unshift(Math.sin(shift()))
cos unshift(Math.cos(shift()))
tan unshift(Math.tan(shift()))
sinh unshift(Math.sinh(shift()))
cosh unshift(Math.cosh(shift()))
tanh unshift(Math.tanh(shift()))
asin unshift(Math.asin(shift()))
acos unshift(Math.acos(shift()))
atan unshift(Math.atan(shift()))
asinh unshift(Math.asinh(shift()))
acosh unshift(Math.acosh(shift()))
atanh unshift(Math.atanh(shift()))
max unshift(Math.max(...stack[st]))
min unshift(Math.min(...stack[st]))
range (i=shift(),j=shift(),unshift(...range(j,i).reverse()))

not unshift(~shift())
NOT unshift(+!shift())
and unshift(shift()&shift())
or unshift(shift()|shift())
xor unshift(shift()^shift())

= unshift(+(shift()==shift()))
!= unshift(+(shift()!=shift()))
> unshift(+(shift()<shift()))
< unshift(+(shift()>shift()))
>= unshift(+(shift()<=shift()))
<= unshift(+(shift()>=shift()))
<=> (i=shift(),j=shift(),unshift(i<j?1:i>j?-1:0))

floor unshift(Math.floor(shift()))
trunc unshift(Math.trunc(shift()))
round unshift(Math.round(shift()))
ceil unshift(Math.ceil(shift()))

pick unshift(get(shift()))
nix splice(shift())
roll (x=get(0),$.pick(),unshift(x+1),$.nix())
roll_ splice(shift(),0,shift())
trade unshift(splice(shift()-1,1,shift())[0])
dup unshift(stack[st][0])
drop shift()
rot unshift(splice(2)[0])
rot_ ($.rot(),$.rot())
swap unshift(splice(1)[0])
nip ($.swap(),$.drop())
tuck ($.dup(),$.rot_())
over ($.swap(),$.tuck())
clr stack[st]=[]
rev stack[st].reverse()
dip ($.swap(),i=shift(),$.es(),unshift(i))

split ($.swap(),unshift(...(shift()+'').split(shift()).reverse()))
join (i=shift(),unshift(stack[st].slice(0).reverse().join(i)))
++ ($.swap(),unshift(''+shift()+shift()))
len unshift((''+shift()).length)
>char unshift(String.fromCharCode(shift()))
<char unshift(shift().charCodeAt())
lower unshift(shift().toLowerCase())
upper unshift(shift().toUpperCase())
repeat ($.swap(),unshift((shift()+'').repeat(shift())))
pad (i=shift(),j=shift(),k=shift(),unshift(_.pad(k,j,i)))
padl (i=shift(),j=shift(),k=shift(),unshift(_.padStart(k,j,i)))
padr (i=shift(),j=shift(),k=shift(),unshift(_.padEnd(k,j,i)))

stack stack[st=shift()]||(stack[st]=[])
push stack[shift()].unshift(shift())
pull unshift(stack[shift()].shift())
size unshift(stack[st].length)
merge unshift(...stack[shift()])
uniq stack[st]=_.uniq(stack[st])
take stack[st]=_.take(stack[st],shift())
drop stack[st]=_.drop(stack[st],shift())

map (X=shift(),St=st,st=St+' ',stack[St]=stack[St].map(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St)
filter (X=shift(),Y=stack[st],St=st,st=St+' ',stack[St]=stack[St].filter(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St)
fold (X=shift(),Z=shift(),St=st,st=St+' ',stack[St].map(a=>
    (stack[st]=[X,a,Z],$.es(),Z=shift())
  ),delete stack[st],st=St,stack[st]=[Z])
some (X=shift(),St=st,st=St+' ',Z=+stack[St].some(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St,stack[st]=[Z])
all (X=shift(),St=st,st=St+' ',Z=+stack[St].every(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St,stack[st]=[Z])
find (X=shift(),St=st,st=St+' ',Z=stack[St].find(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St,stack[st]=[Z])
findi (X=shift(),St=st,st=St+' ',Z=stack[St].findIndex(a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St,stack[st]=[Z])
takew (X=shift(),St=st,st=St+' ',stack[St]=_.takeWhile(stack[St],a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St)
dropw (X=shift(),St=st,st=St+' ',stack[St]=_.dropWhile(stack[St],a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St)
sort (X=shift(),St=st,st=St+' ',stack[St]=_.sortBy(stack[St],a=>
    (stack[st]=[X,a],$.es(),shift())
  ),delete stack[st],st=St)
