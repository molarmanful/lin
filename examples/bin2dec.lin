\CHECK :: \DEC :: ;
\IN :: \IN gi out in ;
CHECK DEC outln

#INEnter a binary number: 
#ERRNot a binary number!

#CHECK \ERR :: ( \ERR gi outln break ) over ( ( 1> ) any ) ' wrap_ e&
#DEC ( rev enum ( wrap_ swap 2 swap ^ * ) map \+ fold ) '



# EXPLANATION
Converts binary to decimal.

- `\CHECK :: \DEC ::` exposes the IDs of DEC and CHECK to the global scope. This is a pretty standard way of declaring functions.
- `\IN :: \IN gi out in` prompts the user for a binary number.
- `CHECK DEC outln` runs both CHECK and DEC and outputs the result.

In CHECK:

- `\ERR ::` exposes the ID of ERR to the global scope for later use.
- `( \ERR gi outln break ) ... e&` will output ERR and end the program if a condition is met.
- `over ( ( 1> ) any ) ' wrap_` takes the inputted number and checks if any of the digits are greater than 1.

In DEC:

- `( rev enum ( ... ) map \+ fold ) '` applies the given lambda over each digit and its index, then sums the result.
- `wrap_ 2 swap ^ *` does `2 ^ (index) * (current digit)`.
