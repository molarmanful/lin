.IN out in ;
dup ( ( 1> ) any ) ' 1_ g: ( .ERR outln break ) e& ;
( enum ( wrap_ swap 2 swap ^ * ) map \+ fold ) ' outln

#INEnter a binary number: 
#ERRNot a binary number!



# EXPLANATION

Converts binary to decimal.

- `.N out in` prompts the user for a binary number.
- `dup ( ( 1> ) any ) ' 0g: ( .ERR outln break ) e& ;` errors if the input is not a binary number.
- `( rev enum ( ... ) map \+ fold ) ' outln` applies the given lambda over each digit and its index, then sums the result and outputs it.
- `wrap_ 2 swap ^ *` does `2 ^ (index) * (current digit)`.
